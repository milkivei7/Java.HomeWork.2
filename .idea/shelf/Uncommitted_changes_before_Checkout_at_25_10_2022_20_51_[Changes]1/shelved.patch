Index: Ex2/vector3D.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class vector3D {\r\n    private double x;\r\n    private double y;\r\n    private double z;\r\n\r\n    public vector3D(double coordinate1, double coordinate2, double coordinate3)\r\n    {\r\n        x = coordinate1;\r\n        y = coordinate2;\r\n        z = coordinate3;\r\n    }\r\n\r\n    public void setX(double x) { this.x = x; }\r\n    public void setY(double y) { this.y = y; }\r\n    public void setZ(double z) { this.z = z; }\r\n\r\n    public void getX(){ return x; }\r\n    public void getY(){ return y; }\r\n    public void getZ(){ return z; }\r\n\r\n    public static void Addition (vector3D Addition)\r\n    {\r\n        x+=Addition.x;\r\n        y+=Addition.y;\r\n        z+=Addition.z;\r\n    }\r\n\r\n    public static void Subtraction (vector3D Subtractiion)\r\n    {\r\n        x-=Subtractiion.x;\r\n        y-=Subtractiion.y;\r\n        z-=Subtractiion.z;\r\n    }\r\n\r\n    public static double ScalarMultiplication (vector3D ScalarMultiplication) //Скалярное произведение векторов\r\n    {\r\n        return x * ScalarMultiplication.x + y * ScalarMultiplication.y + z * ScalarMultiplication.z;\r\n    }\r\n\r\n    public static void MultiplicationVectorOnScalar (vector3D MultiplicationVectorOnScalar, double value_scalar) //Произведение векторов на скаляр\r\n    {\r\n        vector3D.setX(vector3D.getX()*value_scalar);\r\n        vector3D.setY(vector3D.getY()*value_scalar);\r\n        vector3D.setZ(vector3D.getZ()*value_scalar);\r\n    }\r\n\r\n    public static double VectorLenght(vector3D VectorLenght)\r\n    {\r\n        return Math.sqrt((VectorLenght.x * VectorLenght.x) + VectorLenght.y * VectorLenght.y + VectorLenght.z * VectorLenght.z);\r\n    }\r\n\r\n    public static String VectorsComparison(vector3D VectorsComparison)\r\n    {\r\n        if (VectorLenght(VectorsComparison.x)<VectorLenght(VectorsComparison.y))\r\n    }\r\n\r\n    public static String VectorsComparison(vector3D VectorsComparison)\r\n    {\r\n        if (VectorLenght(VectorsComparison.x) < VectorLenght(VectorsComparison.y)) { return \"Первый вектор меньше второго\"; }\r\n        else if (VectorLenght(VectorsComparison.x) < VectorLenght(VectorsComparison.y)) { return \"Первый вектор больше второго\"; }\r\n        return \"Первый и второй векторы равны\";\r\n    }\r\n\r\n    public static vector3D AdditionTwoVectors(vector3D Vector1, vector3D Vector2) { return new vector3D(Vector1.x + Vector2.x, Vector1.y + Vector2.y, Vector1.z + Vector2.z); }\r\n    public static vector3D SubtractionTwoVectors(vector3D Vector1, vector3D Vector2) { return new vector3D(Vector1.x - Vector2.x, Vector1.y - Vector2.y, Vector1.z - Vector2.z); }\r\n    public static double MultiplicationTwoVectors(vector3D Vector1, vector3D Vector2) { return Vector1.x * Vector2.x + Vector1.y * Vector2.y + Vector1.z * Vector2.z; }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ex2/vector3D.java b/Ex2/vector3D.java
--- a/Ex2/vector3D.java	
+++ b/Ex2/vector3D.java	
@@ -14,56 +14,59 @@
     public void setY(double y) { this.y = y; }
     public void setZ(double z) { this.z = z; }
 
-    public void getX(){ return x; }
-    public void getY(){ return y; }
-    public void getZ(){ return z; }
+    public double getX(){ return x; }
+    public double getY(){ return y; }
+    public double getZ(){ return z; }
 
-    public static void Addition (vector3D Addition)
+    public void Addition (vector3D Addition)
     {
         x+=Addition.x;
         y+=Addition.y;
         z+=Addition.z;
     }
 
-    public static void Subtraction (vector3D Subtractiion)
+    public void Subtraction (vector3D Subtractiion)
     {
         x-=Subtractiion.x;
         y-=Subtractiion.y;
         z-=Subtractiion.z;
     }
 
-    public static double ScalarMultiplication (vector3D ScalarMultiplication) //Скалярное произведение векторов
+    public double ScalarMultiplication (vector3D ScalarMultiplication) //Скалярное произведение векторов
     {
         return x * ScalarMultiplication.x + y * ScalarMultiplication.y + z * ScalarMultiplication.z;
     }
 
-    public static void MultiplicationVectorOnScalar (vector3D MultiplicationVectorOnScalar, double value_scalar) //Произведение векторов на скаляр
+    public static void MultiplicationVectorOnScalar (vector3D vector3D, double value_scalar) //Произведение векторов на скаляр
     {
         vector3D.setX(vector3D.getX()*value_scalar);
         vector3D.setY(vector3D.getY()*value_scalar);
         vector3D.setZ(vector3D.getZ()*value_scalar);
     }
 
-    public static double VectorLenght(vector3D VectorLenght)
+    public double VectorLength(vector3D Vector)
     {
-        return Math.sqrt((VectorLenght.x * VectorLenght.x) + VectorLenght.y * VectorLenght.y + VectorLenght.z * VectorLenght.z);
+        return Math.sqrt((Vector.x * Vector.x) + Vector.y * Vector.y + Vector.z * Vector.z);
     }
 
-    public static String VectorsComparison(vector3D VectorsComparison)
-    {
-        if (VectorLenght(VectorsComparison.x)<VectorLenght(VectorsComparison.y))
-    }
 
-    public static String VectorsComparison(vector3D VectorsComparison)
+    public String equals(vector3D Vector1, vector3D Vector2)
     {
-        if (VectorLenght(VectorsComparison.x) < VectorLenght(VectorsComparison.y)) { return "Первый вектор меньше второго"; }
-        else if (VectorLenght(VectorsComparison.x) < VectorLenght(VectorsComparison.y)) { return "Первый вектор больше второго"; }
+        if (VectorLength(Vector1) < VectorLength(Vector2)) { return "Первый вектор меньше второго"; }
+        else if (VectorLength(Vector1) < VectorLength(Vector2)) { return "Первый вектор больше второго"; }
         return "Первый и второй векторы равны";
     }
 
     public static vector3D AdditionTwoVectors(vector3D Vector1, vector3D Vector2) { return new vector3D(Vector1.x + Vector2.x, Vector1.y + Vector2.y, Vector1.z + Vector2.z); }
     public static vector3D SubtractionTwoVectors(vector3D Vector1, vector3D Vector2) { return new vector3D(Vector1.x - Vector2.x, Vector1.y - Vector2.y, Vector1.z - Vector2.z); }
     public static double MultiplicationTwoVectors(vector3D Vector1, vector3D Vector2) { return Vector1.x * Vector2.x + Vector1.y * Vector2.y + Vector1.z * Vector2.z; }
+    public String toString() {
+        return "vector{" +
+                "x=" + x +
+                ", y=" + y +
+                ", z=" + y +
+                '}';
+    }
+}
 
 
-}
\ No newline at end of file
